STRUCTURE
{
  status: boolean,
  message: string, 
  data: object 
}


AUTHORIZATION 
Authorization Method: Bearer Token
eg: Authorization: Bearer sk_test_shdjkhdj827391nV4Lid

contains the following info:

 {
   user: userId,
 }

 have a redis server: store all created user id there.
 each user id should correspond to what it is in the posrgres database

 we should user info there


HTTP STATUS
 200 => 
 201 =>
 204
 304
 400
 401
 403
 404
 500

API ENDPOINTS

1. /currency-pair/list
 -H "Authorization: Bearer YOUR_SECRET_KEY" (optional)
 -D  {base?: string, date_from?:number(timestamp) date_to?:number(timestamp), date?:number(timestamp), include_favourites?: boolean, pagination_offset?: number, pagaintion_count?:number,  market?: 'parallel' | 'black', filter?: 'all' | 'starred' }
 -X GET

 -H {status: number}
 - R {status: boolean, msg: string, data: {
   currency_pairs: {     
    data: {
      quota: string,
      price: number[],
      is_starred?: boolean
    }[]
     dates: number[],
     base: string
   },

   pagination?: {
      total: number, 
      skipped: number,
      per_page: number, 
      page: number,
      page_count: number
   }
 }}

 // QUERY
 // base: (optional)  DEFAULT => db default base
 // date_from: (optional) timestamp from where the history of rate to be returned should start. NOTE => If `date` is provided, this is ignored
 // date_to: (optional) timestamp from where the history of rate to be returned should end. NOTE => If `date` is provided or `date_from` is not provided, this is ignored DEFAULT => if date_from  is provided, timestamp of NOW 
 // date: (optional) timestamp from which the get the rate of currency pair. DEFAULT: if `date_from` is not provided: timestamp of NOW
 // include_star:  (optional) whether to include whether the user starred the currency pair for easy access in the RESPONSE.   DEFAULT: false  NOTE => If set to true and user is not authenticated and authorized. Returns a header status of 401
 // pagination_start: (optional) same as OFFSET in SQL. DEFAULT: 0
 // pagination_count: (optional) same as LIMIT in SQL. NOTE: `Response` contains all if nothing is passed

//  market: (optional) the type of market rate to run. DEFAULT: parallel
// filter: (optioanl) whether to return only starred or all users. DEFAULT => all. NOTE => if user is not authenticated and authorized and filter is 'starred', empty array of currency_pair is returned


 2. /currency-pair/star 
 -H "Authorization: Bearer YOUR_SECRET_KEY" 
 -D  {base: string[], quota: string[]} => the `base` in the `i`th index corresponds to the quota in the `i`th index
 -X PUT

 -H {status: number}
 -R  {
   status: boolean,
   msg: string
 }


//  TODO: Include and store buttons clicked and pages went to 
// TODO: Includes and store user metadata



3. /currency-pair/alert
-H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
 -D  {pagination_start?: number, pagaintion_count?:number,  market?: 'parallel' | 'black', filter?: 'all' | 'untriggered' | 'triggered' }
 -X GET

 -H {status: number}
 - R {status: boolean, msg: string, data: {
   alerts: {
      id: string,
      target: number,
      set_timestamp: number(timestamp),
      triggered_timestamp: number(timestamp),
      type:  'un_triggered' | 'triggered'
   }[],

   pagination?: {
      base: string,
      total: number, 
      skipped: number,
      per_page: number, 
      page: number,
      page_count: number
   }
 }}


 4. /currency-pair/alert/
 -H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
   -D  {ids: [] } or  {id: []}
 -X DELETE

 -H {status: number}


 5. /user/auth/sign-in  // maybe return to /currency-pair/list. TODO later
 -H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
  -D  {email: string, password: string }
  -X POST
 
  -H {status: number}
  - R {status: boolean, msg: string, data: {
    token: string,
 
  }}

  6. /user/auth/sign-up
  -D  {name: string, password: string, email: string, phone: string }  // name and email should be unique
  -X POST
 
  -H {status: number}  // keep user data in datebase for some weeks and then delete if enter one time password
  // redirect to send one time password
  - R {status: boolean, msg: string}
 

  7. /user/auth/otp/send/:email
    -X POST 

    -H {status:  number}
    -R {
      status: boolean, 
      msg: string
    }

  8. /user/auth/otp/verify/:email 
      -X POST 
      -D {otp: string, include_token: boolean}

        -H {status:  number}
        -R {
          status: boolean, 
          msg: string,
          data?:  {
            token: string
          }
        }

    8. /user/notification/list 
    -H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
      -X GET
      -D {page_offset?: number, page_count?:number }

      -H {status: number}
      - R {status: boolean, msg: string,
      data: {
        msg: string,
        notifications: {
          id: string,
          sent_timestamp: number(timestamp)
          type: "price_alert" | "trade" | "fund" ,
        }[]
       
        pagination?: {
          base: string,
          total: number, 
          skipped: number,
          per_page: number, 
          page: number,
          page_count: number
       }
      }
    }


    /user/notification
    -H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
    -X POST 
    -D {ids: []}

     -H {status: number}
      - R {status: boolean, msg: string,
      data: {
        deleted_count: number
      }
    }


    9. /market/trade/list 
      -X GET 
      -D {page_offset?: number, page_count?:number, base?: string[], quota?: string[] }
    
      -H {status: number}
      - R {status: boolean, msg: string,
        data: {
          trades: {
            id: string, 
            seller_id: string, 
            seller_name: string, 
            base_give: string, 
            quota_receive: string, 
            rate: number,
            available_sell: number,
          }[] ,
        pagination: {
          skipped: number,
          page_count: number
       }
      }}


  10. /currency-pair/currency/list
  -X GET 

  -H {status: number}
  - R {status: boolean, msg: string,
    data: string[]
  }

  11. /wallet/currency/list 
  -H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
  -X GET {currencies?: string | string[]}

  -H {status: number}
  - R {status: boolean, msg: string,
    data: string[]
  }


  12. /market/trade/exchange  
  -H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
  -X POST
  -D {base_give: string, quota_receive: string, amount: number, seller_id: string}

  -H {status: number}
  - R {status: boolean, msg: string}
  

    // TODO: Later version come with an option of chooisng one-time-password method or following a link sent to email (if it is secure) method

13. /currency-pair/alerts/set
-H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
-D {target_rate:number, market_type: "parallel" | "black", base: string, quota: string}
-X POST

-H {status: number}
- R {status: boolean, msg: string}


14. /user/edit 
-H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
-D {name?: string, phone?: string}
-X POST

-H {status: number}
- R {status: boolean, msg: string, data: {
  name?: string, 
  phone?: string;
}}

15.  set rate  
-H "Authorization: Bearer YOUR_SECRET_KEY" // returns 401 if user not authenticated
-D {base: string, quota: string, rate?: string}
-X POST  

-H {status: number}
-R {status: boolean, msg: string}
TODO: Get user data

TODO: Fund wallet 
TODO: app settings edit
set-black-rate
TODO: set rate 

TODO: at init, set the currencies data and start inserting parallel_rates data

WS SOCKET 

/currency-pair/rate/parallel/change 
/currency-pair/rate/black/change 

/notification/price-alert/triggered
/notification/trade/success
/notification/fund/success

// listen for price changes
// subscribe

// listen to notification


INTERVAL
// add new parallel_rate price 
// check price alerts
// add notification and delete notificaion